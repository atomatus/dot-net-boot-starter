# This workflow execute a sequence of jobs to build, 
# release and publish a packages to NuGet.

name: 00 - Dot Net Deploy to NuGet

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  PROJ_BS_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter/Com.Atomatus.Bootstarter.csproj'
  PROJ_BS_COSMOS_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter.Cosmos/Com.Atomatus.Bootstarter.Cosmos.csproj'
  PROJ_BS_POSTGRES_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter.Postgres/Com.Atomatus.Bootstarter.Postgres.csproj'
  PROJ_BS_SQLITE_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter.Sqlite/Com.Atomatus.Bootstarter.Sqlite.csproj'
  PROJ_BS_SQLSERVER_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter.Sqlserver/Com.Atomatus.Bootstarter.Sqlserver.csproj'  
  PROJ_BS_TEST_PATH: 'Atomatus.Bootstarter/Com.Atomatus.Bootstarter.Sqlite.Test/Com.Atomatus.Bootstarter.Sqlite.Test.csproj'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
          
      # region Bootstarter Test
      - name: 'Restore Bootstarter'
        if: ${{ success() }}
        run: dotnet restore ${{ env.PROJ_BS_PATH }}

      - name: 'Build Bootstarter'        
        if: ${{ success() }}
        run: dotnet build ${{ env.PROJ_BS_PATH }} --no-restore --configuration Release
     
      - name: 'Restore Bootstarter.Sqlite'
        if: ${{ success() }}
        run: dotnet restore ${{ env.PROJ_BS_SQLITE_PATH }}

      - name: 'Build Bootstarter.Sqlite'
        if: ${{ success() }}
        run: dotnet build ${{ env.PROJ_BS_SQLITE_PATH }} --no-restore --configuration Release
       
      - name: 'Test Bootstarter'        
        if: ${{ success() }}
        run: dotnet test ${{ env.PROJ_BS_TEST_PATH }} --no-restore --logger "console;verbosity=detailed"
      # endregion

      # region Bootstarter      
      - name: Publish Bootstarter to NuGet
        if: ${{ success() }}
        uses: brandedoutcast/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ${{ env.PROJ_BS_PATH }}
          VERSION_REGEX: '^\s*<PackageVersion>(.*)</PackageVersion>\s*$'
          TAG_FORMAT: '*'
          NUGET_KEY: ${{ secrets.NUGET_COM_ATOMATUS_AUTH_KEY }}
          INCLUDE_SYMBOLS: true
      # endregion 
             
      # region Bootstarter.Sqlite     
      - name: Publish Bootstarter.Sqlite to NuGet
        if: ${{ success() }}
        uses: brandedoutcast/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ${{ env.PROJ_BS_SQLITE_PATH }}
          VERSION_REGEX: '^\s*<PackageVersion>(.*)</PackageVersion>\s*$'          
          NUGET_KEY: ${{ secrets.NUGET_COM_ATOMATUS_AUTH_KEY }}
          TAG_COMMIT: false
          INCLUDE_SYMBOLS: true
      # endregion 
         
      # region Bootstarter.Cosmos
      - name: 'Restore Bootstarter.Cosmos'
        if: ${{ success() }}
        run: dotnet restore ${{ env.PROJ_BS_COSMOS_PATH }}

      - name: 'Build Bootstarter.Cosmos'
        if: ${{ success() }}
        run: dotnet build ${{ env.PROJ_BS_COSMOS_PATH }} --no-restore --configuration Release
      
      - name: Publish Bootstarter.Cosmos to NuGet
        if: ${{ success() }}
        uses: brandedoutcast/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ${{ env.PROJ_BS_COSMOS_PATH }}
          VERSION_REGEX: '^\s*<PackageVersion>(.*)</PackageVersion>\s*$'          
          NUGET_KEY: ${{ secrets.NUGET_COM_ATOMATUS_AUTH_KEY }}
          TAG_COMMIT: false
          INCLUDE_SYMBOLS: true
      # endregion 

      # region Bootstarter.Postgres
      - name: 'Restore Bootstarter.Postgres'
        if: ${{ success() }}
        run: dotnet restore ${{ env.PROJ_BS_POSTGRES_PATH }}

      - name: 'Build Bootstarter.Postgres'
        if: ${{ success() }}
        run: dotnet build ${{ env.PROJ_BS_POSTGRES_PATH }} --no-restore --configuration Release
      
      - name: Publish Bootstarter.Postgres to NuGet
        if: ${{ success() }}
        uses: brandedoutcast/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ${{ env.PROJ_BS_POSTGRES_PATH }}
          VERSION_REGEX: '^\s*<PackageVersion>(.*)</PackageVersion>\s*$'          
          NUGET_KEY: ${{ secrets.NUGET_COM_ATOMATUS_AUTH_KEY }}
          TAG_COMMIT: false
          INCLUDE_SYMBOLS: true
      # endregion 

      # region Bootstarter.Sqlserver
      - name: 'Restore Bootstarter.Sqlserver'
        if: ${{ success() }}
        run: dotnet restore ${{ env.PROJ_BS_SQLSERVER_PATH }}

      - name: 'Build Bootstarter.Sqlserver'
        if: ${{ success() }}
        run: dotnet build ${{ env.PROJ_BS_SQLSERVER_PATH }} --no-restore --configuration Release
      
      - name: Publish Bootstarter.Sqlserver to NuGet
        if: ${{ success() }}
        uses: brandedoutcast/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ${{ env.PROJ_BS_SQLSERVER_PATH }}
          VERSION_REGEX: '^\s*<PackageVersion>(.*)</PackageVersion>\s*$'          
          NUGET_KEY: ${{ secrets.NUGET_COM_ATOMATUS_AUTH_KEY }}
          TAG_COMMIT: false
          INCLUDE_SYMBOLS: true
      # endregion 
      